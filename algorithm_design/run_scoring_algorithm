Clear[a, q, p, b]
planes = {x == xm, y == ym, z == zm, x == (p + a)^2, y == (q + b)^2, 
   z == (a + b)^2, y + z == (a + q)^2, x + y + z == (p + q)^2, 
   x + z == (p + b)^2};
allverts = ({x, y, z} /. 
    Flatten[Function[cond, Solve[cond, {x, y, z}]] /@ 
      Function[eqs, eqs /. {List -> And}] /@ Subsets[planes, {3}], 1]);
p1 = 1.7;
q1 = 1.7;
pareto[xm1_, ym1_, zm1_, a1_, b1_] := 
 Module[{allverts1, polytopeverts, paretoverts},
  allverts1 = 
   allverts /. {xm -> xm1, ym -> ym1, zm -> zm1, a -> a1, b -> b1, 
     p -> p1, q -> q1};
  polytopeverts = 
   Select[allverts1, #[[1]] >= xm1 && #[[2]] >= ym1 && #[[3]] >= 
       zm1 && #[[1]] <= (p1 + a1)^2 && #[[2]] <= (q1 + b1)^2 && #[[
        3]] <= (a1 + b1)^2 && #[[2]] + #[[3]] <= (q1 + a1)^2 && #[[
         1]] + #[[2]] + #[[3]] <= (p1 + q1)^2 && #[[1]] + #[[
         3]] <= (p1 + b1)^2 &];
  paretoverts = -Internal`ListMin[-polytopeverts];
  paretoverts
  ]
xmin[xm1_, ym1_, zm1_, a1_, b1_] := 
 Module[{}, 
  Max[Function[a11, 
     Min[Transpose[pareto[xm1, ym1, zm1, a11, b1]][[1]]]] /@ 
    Range[0, a1, 0.01]]]
ymin[xm1_, ym1_, zm1_, a1_, b1_] := 
 Module[{}, 
  Max[Function[b11, 
     Min[Transpose[pareto[xm1, ym1, zm1, a1, b11]][[2]]]] /@ 
    Range[0, b1, 0.01]]]
zmin[xm1_, ym1_, zm1_, a1_, b1_] := Module[{},
  Max[Function[pair, 
     Min[Transpose[pareto[xm1, ym1, zm1, pair[[1]], pair[[2]]]][[
       3]]]] /@ 
    Flatten[Table[{i, j}, {i, 0, a1, 0.01}, {j, 0, b1, 0.01}], 1]]
  ]

pareto[xmin[0, 0, 0, .65, 1], ymin[0, 0, 0, .65, 1], 
 zmin[0, 0, 0, .65, 1], .65, 1]
restrict[pt_, a1_, b1_] := {xmin[pt[[1]], pt[[2]], pt[[3]], a1, b1], 
  ymin[pt[[1]], pt[[2]], pt[[3]], a1, b1], 
  zmin[pt[[1]], pt[[2]], pt[[3]], a1, b1]}

allverts;
Function[pt, 
   FullSimplify[
    pt[[1]] >= xm && pt[[2]] >= ym && pt[[3]] >= zm && 
     pt[[1]] <= (p + a)^2 && pt[[2]] <= (q + b)^2 && 
     pt[[3]] <= (a + b)^2 && pt[[2]] + pt[[3]] <= (q + a)^2 && 
     pt[[1]] + pt[[2]] + pt[[3]] <= (p + q)^2 && 
     pt[[1]] + pt[[3]] <= (p + b)^2]] /@ allverts;

polytopeverts = 
 Select[allverts, #[[1]] >= xm && #[[2]] >= ym && #[[3]] >= 
     zm && #[[1]] <= (p + a)^2 && #[[2]] <= (q + b)^2 && #[[
      3]] <= (a + b)^2 && #[[2]] + #[[3]] <= (q + a)^2 && #[[1]] + #[[
       2]] + #[[3]] <= (p + q)^2 && #[[1]] + #[[3]] <= (p + b)^2 &]
paretoverts = -Internal`ListMin[-polytopeverts]


(* sequencer will run this algorithm to sompute scores vector *)

 Compute_Personalisedpagrankvector[W_, v_, e_, p_] := 
 Module[{mass, rank, queue, node, val, rem, prev, s},
  mass = ConstantArray[0, Length[W]];
  rank = ConstantArray[0, Length[W]];
  mass[[v]] = 1;
  queue = 
   Select[Range[Length[W]], mass[[#]] >= e Total[W[[v]]] &];
  s = 0;
  While[s < 100 && Length[queue] > 0,
   node = queue[[1]];
   val = mass[[node]];
   rank[[node]] += p val;
   mass[[node]] = 0.5 (1 - p) val;
   mass += 0.5 (1 - p) val W[[node]]/Total[W[[node]]];
   queue = 
    Select[Range[Length[W]], mass[[#]] >= e Total[W[[v]]] &];
   s += 1;
   ];
  Print[s];
  SortBy[Range[Length[W]], -rank[[#]] &]
  ]


(*  circuit will check the following equation for the scoring vector *)

Compute_Personalisedpagrankvector[W,v,e,p]==p.IdentityMatrix[Length[v]]+(1-p)Compute_Personalisedpagrankvector[W,v,e,p](IdentityMatrix[Length[v]]+W)/2
