<< IGraphM`
rg1 = IGWattsStrogatzGame[20, 0.2]; g1 = 
 CreateGraph[VertexList[rg1], EdgeList[rg1], 
  RandomInteger[{1, 5}, Length[EdgeList[rg1]]]] 

CreateGraph[verts_, edges_, wts_] := 
 Graph[Function[v, 
    Labeled[v, Placed[Style[v, Black, Small], Center]]] /@ verts, 
  Function[i, 
    Labeled[edges[[i]][[1]] \[UndirectedEdge] edges[[i]][[2]], 
     wts[[i]]]] /@ Range[Length[edges]], VertexSize -> 0.5, 
  VertexStyle -> White, VertexLabelStyle -> 14, EdgeWeight -> wts]
  
  GenerateRandomGraph[n_, r_, k_] := 
 Module[{p, edges, done = False, i, wts},
  While[done == False,
   done = True;
   p = PermutationReplace[Range[n r], RandomPermutation[n r]];
   edges = 
    Sort /@ Function[e, Mod[e, n] + 1] /@ 
      Function[i, {p[[2 i - 1]], p[[2 i]]}] /@ Range[Floor[n r/2]];
   For[i = 1, i <= Length[edges], i++, 
    If[edges[[i]][[1]] == edges[[i]][[2]], done = False, Nothing]];
   If[done == True && Length[DeleteDuplicates[edges]] < Length[edges],
     done = False, Nothing];
   ];
  wts = RandomInteger[{1, k}, Length[edges]];
  CreateGraph[Range[n], edges, wts]
  ]
  
  g = GenerateRandomGraph[40, 4, 5]
  W = Normal[WeightedAdjacencyMatrix[g]]
  
  
  RunDiffusionProcess[W_, v_, epsilon_, p_] := 
 Module[{mass, rank, queue, node, val, rem, prev, s},
  mass = ConstantArray[0, Length[W]];
  rank = ConstantArray[0, Length[W]];
  mass[[v]] = 1;
  queue = 
   Select[Range[Length[W]], mass[[#]] >= epsilon Total[W[[v]]] &];
  s = 0;
  While[s < 1000 && Length[queue] > 0,
   node = queue[[1]];
   val = mass[[node]];
   rank[[node]] += p val;
   mass[[node]] = 0.5 (1 - p) val;
   mass += 0.5 (1 - p) val W[[node]]/Total[W[[node]]];
   queue = 
    Select[Range[Length[W]], mass[[#]] >= epsilon Total[W[[v]]] &];
   s += 1;
   ];
  Print[s];
  SortBy[Range[Length[W]], -rank[[#]] &]
  ]
  
  
  SubsetIndicator[A_] := 
 Total[Function[i, UnitVector[Length[W], i]] /@ A]
 
 
 Score[epsilon_, p_] := Module[{result},
  result = RunDiffusionProcess[W, 1, epsilon, p];
  Min[Function[
     k, (SubsetIndicator[result[[1 ;; k]]] . W . 
          SubsetIndicator[result[[k + 1 ;; Length[W]]]])/k] /@ 
    Range[Floor[Length[W]/2]]]
  ]
  
  
  
  (* scoring metrics *)
  
invdist[g_, s_, t_, A_] := Module[{sg, vsg, d},
  sg = Graph[VertexList[g], A];
  1/GraphDistance[sg, s, t]
  ]
  
between[g_, s_, t_, A_] := Module[{sps, spsA, d},
  d = GraphDistance[g, s, t];
  sps = FindPath[g, s, t, {d}, All];
  spsA = Select[sps, IntersectingQ[A, pathedges[#]] &];
  If[Length[sps] == 0, 0, Length[spsA]/Length[sps]]
  ]
  
betweens[g_, s_, t_, A_] := Module[{d , sps, spsA},
  d = GraphDistance[g, s, t];
  sps = FindPath[g, s, t, {d}, All];
  spsA = Select[sps, SubsetQ[A, pathedges[#]] &];
  If[Length[sps] == 0, 0, Length[spsA]/Length[sps]]
  ]



algoy[graph_, verts_, k_] := 
 Module[{v, sg, alpha, i, tau, j, test = Range[0, 7, 0.1], 
   res},                                                                                                                     \
  alpha = ConstantArray[0, Length[verts]];
  v = verts[[1]];
  alpha[[v]] = 1;
  sg = Subgraph[graph, {v}];
  Print[HighlightGraph[wg[graph, alpha], sg, 
    GraphHighlightStyle -> "Thick"]];
  For[i = 2, i <= Length[verts], i++,
   v = verts[[i]];
   sg = Subgraph[graph, verts[[Range[i]]]];
   res = 0;
   For[j = 1, j <= Length[test], j++,
    tau = alpha;
    tau[[v]] = test[[j]];
    res = If[L[sg, tau] <= k, test[[j]], res];
    Print[L[sg, tau]];
    ];
   alpha[[v]] = res;
   Print[
    HighlightGraph[wg[graph, alpha], sg, 
     GraphHighlightStyle -> "Thick"]];
   ];
  ]


(* how phi evolves given a sequence of edges, phi_0[v] = 1 if v=1 and \
0 otherwise  *)
evolvei[seq_] := 
 Module[{verts = Range[5], edges = {}, g, phi, G, G0, i},
  G0 = Graph[verts, 
    Function[e, e[[1]] \[UndirectedEdge] e[[2]]] /@ seq, 
    VertexSize -> Medium, VertexLabels -> Placed["Name", Center]];
  phi = Function[v, If[v == 1, 1, 0]] /@ verts;
  For[i = 1, i <= Length[seq], i++,
   AppendTo[edges, seq[[i]] ];
   g = Graph[verts, 
     Function[e, e[[1]] \[UndirectedEdge] e[[2]]] /@ edges, 
     VertexSize -> Medium, VertexLabels -> Placed["Name", Center]];
   phi = thetag[g, phi];
   G = Graph[G0, VertexWeight -> N[phi, 3], 
     VertexLabels -> Placed["VertexWeight", Center], 
     VertexLabelStyle -> Directive[Red, Bold, 15], Options[G0]];
   Print[
    HighlightGraph[G, 
     Function[e, e[[1]] \[UndirectedEdge] e[[2]]] /@ edges, 
     GraphHighlightStyle -> "Thick"]]
   ];
  ]
evolve[graph_, phi0_, seq_] := Module[{verts, edges, g, phi, G, G0, i},
  verts = VertexList[graph];
  edges = Function[e, {e[[1]], e[[2]]}] /@ EdgeList[graph];
  G0 = Graph[verts, 
    Function[e, e[[1]] \[UndirectedEdge] e[[2]]] /@ Union[edges, seq],
     VertexSize -> Medium, VertexLabels -> Placed["Name", Center]];
  phi = phi0;
  Print[Graph[G0, VertexWeight -> N[phi, 3], 
    VertexLabels -> Placed["VertexWeight", Center], 
    VertexLabelStyle -> Directive[Red, Bold, 15], Options[G0]]];
  For[i = 1, i <= Length[seq], i++,
   AppendTo[edges, seq[[i]] ];
   g = Graph[verts, 
     Function[e, e[[1]] \[UndirectedEdge] e[[2]]] /@ edges, 
     VertexSize -> Medium, VertexLabels -> Placed["Name", Center]];
   phi = thetag[g, phi];
   G = Graph[G0, VertexWeight -> N[phi, 3], 
     VertexLabels -> Placed["VertexWeight", Center], 
     VertexLabelStyle -> Directive[Red, Bold, 15], Options[G0]];
   Print[
    HighlightGraph[G, 
     Function[e, e[[1]] \[UndirectedEdge] e[[2]]] /@ edges, 
     GraphHighlightStyle -> "Thick"]]
   ];
  ]


(* choose scoring metric *)
thetag[g_, phi_] := Module[{val, sh, verts, edges},
  verts = VertexList[g];
  edges = Function[e, {e[[1]], e[[2]]}] /@ EdgeList[g];
  val[A_] := 
   Total[Function[p, 
      Sqrt[phi[[p[[1]]]] phi[[p[[2]]]]] between[g, p[[1]], p[[2]], 
        A]] /@ Subsets[verts, {2}]];
  sh[e_] := 
   Expand[Simplify[
     Total[Function[
         A, (val[Union[A, {e}]] - val[A])/
          Binomial[Length[edges] - 1, Length[A]]] /@ 
        Subsets[Complement[edges, {e}]]]/Length[edges]]];
  nu[g, sh /@ edges]
  ]


(*find fixed points of theta with cords < B using step size d*)

findfps[g_, B_, d_] := Module[{verts, vol, grid, cands},
  verts = VertexList[g];
  grid = 
   Flatten[Table @@ 
     Prepend[Function[x, {x, d, B, d}] /@ xvec[g], xvec[g]], 
    Length[verts] - 1];
  cands = Function[alpha, theta[g, alpha]] /@ grid;
  DeleteDuplicates[Select[cands, theta[g, #] == # &]]
  ]
findfps1[g_, B_, d_] := 
 DeleteDuplicates[
  Select[Function[alpha, theta1[g, alpha]] /@ 
    Flatten[Table @@ 
      Prepend[Function[x, {x, d, B, d}] /@ xvec[g], xvec[g]], 
     Length[VertexList[g]] - 1], theta1[g, #] == # &]]
findfps2[g_, B_, d_] := Module[{verts, vol, grid, cands},
  verts = VertexList[g];
  grid = 
   Flatten[Table @@ 
     Prepend[Function[x, {x, d, B, d}] /@ xvec[g], xvec[g]], 
    Length[verts] - 1];
  cands = Function[alpha, theta1[g, alpha]] /@ grid;
  DeleteDuplicates[Select[cands, theta1[g, #] == # &]]
  ]

dev[g_, alpha_, delta_] := Module[{verts, vol, sets},
  verts = VertexList[g];
  vol = Total[alpha];
  sets = 
   Select[Subsets[verts], 
    Length[#] > 0 && Total[alpha[[#]]] <= vol/2 &];
  Max @@ 
   Function[S, 
     delta^Length[S] (Min @@ 
        Function[A, 
          If[SubsetQ[A, S], bdry[g, A]^2 - Total[alpha[[A]]], 
           Infinity]] /@ sets)] /@ sets
  ]



des[g_, x0_] := 
 Module[{stepsize, steps, verts, sets, x, i, B, grad, res = {x0}},
  stepsize = 0.1;
  steps = 100;
  verts = VertexList[g];
  sets = Select[Subsets[verts], 1 <= Length[#] <= Length[verts] - 1 &];
  x = x0 + proj[g, RandomReal[{-0.1, 0.1}, Length[verts]]];
  For[i = 1, i <= steps, i++,
   B = SortBy[
       Function[
         A, {A, Total[x[[A]]] (1 - Total[x[[A]]])/bdry[g, A]^3}] /@ 
        sets, Last][[-1]][[1]];
   grad = 
    Function[v, 
      If[MemberQ[B, v], 1 - Total[x[[B]]], Total[x[[B]]]]/
       bdry[g, B]] /@ verts;
   x = x - stepsize proj[g, grad];
   AppendTo[res, x];
   ];
  Round[res, 0.001]
  ]


pts[g_] := 
 Module[{verts, x, sets, bdrys, vecs, inp, pp, i, v, res = {}, 
   reg = {}},
  verts = VertexList[g];
  x = xvec[g];
  sets = Subsets[verts, {1, Length[x] - 1}];
  bdrys = Function[A, bdry[g, A]^2] /@ sets;
  vecs = Function[A, Total[x[[A]]]] /@ sets;
  inp = And @@ Function[xi, xi >= 0] /@ x && 
    And @@ Function[A, 
       Total[x[[A]]] > Total[x[[Complement[verts, A]]]] || 
        Total[x[[A]]] <= bdry[g, A]^2] /@ sets;
  pp = DeleteDuplicates[
    Flatten[Function[eqs, Solve[And @@ eqs, x]] /@ 
      Subsets[Function[A, bdry[g, A]^2 == Total[x[[A]]]] /@ 
        sets, {Length[x]}], 1]];
  For[i = 1, i <= Length[pp], i++, v = Simplify[inp /. pp[[i]]]; 
   If[BooleanQ[v] == True , 
    If[v == True, AppendTo[res, x /. pp[[i]]], Nothing], 
    AppendTo[reg, {pp[[i]], v}]]];
  {res, reg}
  ]
isor[g_] := Module[{verts},
  verts = VertexList[g];
  ListPlot[
   Function[A, {Length[A], bdry[g, A]}] /@ 
    Table[RandomSample[verts, RandomInteger[{1, Length[verts]}]], 
     300], PlotRange -> Full]
  ]
